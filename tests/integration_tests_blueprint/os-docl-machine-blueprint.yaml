tosca_definitions_version: cloudify_dsl_1_3

description: >
  The blueprint provides a solution for executing the Cloudify integration tests on an Openstack environment.
  In addition, this blueprint provides some custom CI operations such as uploading the Cloudify docker image to
  S3 for use in other test executions.


imports:
  - http://www.getcloudify.org/spec/fabric-plugin/1.5.2/plugin.yaml
  - http://www.getcloudify.org/spec/cloudify/5.0.dev1/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.0.1/plugin.yaml
  - docl-base-types.yaml

inputs:
  image_id:
    description: Openstack image name or id to use for the new server
  flavor_id:
    description: Openstack flavor name or id to use for the new server
  subnet_dns_nameservers:
    default: []
  keystone_username:
    default: ''
  keystone_password:
    default: ''
  keystone_tenant_name:
    default: ''
  keystone_url:
    default: ''
  region:
    default: ''
  skip_openstack_cert_verification:
    default: true
  use_existing_keypair:
    default: ''
  public_key_name:
    default: ''
  ssh_key_filename:
    default: ''
  use_existing_keypair:
    default: ''
  network_name:
    default: ''
  subnet_name:
    default: ''
  port_name:
    default: ''
  router:
    default: ''
  external_network_name:
    default: ''
  security_group_name:
    default: ''
  server_name:
    default: ''
  server_name:
    default: ''
  nova_url:
    default: ''
  neutron_url:
    default: ''

dsl_definitions:
  openstack_configuration: &openstack_configuration
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: keystone_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }
    nova_url: { get_input: nova_url }
    neutron_url: { get_input: neutron_url }
    custom_configuration:
      keystone_client:
        insecure: { get_input: skip_openstack_cert_verification }
      nova_client:
        insecure: { get_input: skip_openstack_cert_verification }
      neutron_client:
        insecure: { get_input: skip_openstack_cert_verification }
      cinder_client:
        insecure: { get_input: skip_openstack_cert_verification }

node_templates:
  keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      use_external_resource: { get_input: use_existing_keypair }
      resource_id: { get_input: public_key_name }
      private_key_path: { get_input: ssh_key_filename }
      openstack_config: *openstack_configuration

  network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: { get_input: network_name }
      openstack_config: *openstack_configuration

  subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      resource_id: { get_input: subnet_name }
      subnet:
        ip_version: 4
        cidr: 172.16.0.0/16
        dns_nameservers: { get_input: subnet_dns_nameservers }
      openstack_config: *openstack_configuration
    relationships:
      - target: network
        type: cloudify.relationships.contained_in
      - target: router
        type: cloudify.openstack.subnet_connected_to_router

  port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_configuration
      resource_id: { get_input: port_name }
    relationships:
      - type: cloudify.relationships.contained_in
        target: network
      - type: cloudify.relationships.depends_on
        target: subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: security_group

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      resource_id: { get_input: router }
      openstack_config: *openstack_configuration
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: true
      resource_id: { get_input: external_network_name }
      openstack_config: *openstack_configuration

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      resource_id: { get_input: security_group_name }
      security_group:
        description: Security group for the VM
      rules:
        - port: 22
          remote_ip_prefix: 0.0.0.0/0
      openstack_config: *openstack_configuration

  server_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_name: { get_input: external_network_name }
      openstack_config: *openstack_configuration

  host:
    type: cloudify.openstack.nodes.Server
    properties:
      resource_id: { get_input: server_name }
      install_agent: false
      server:
        image: { get_input: image_id }
        flavor: { get_input: flavor_id }
      management_network_name: { get_property: [network, resource_id] }
      openstack_config: *openstack_configuration
    relationships:
      - target: keypair
        type: cloudify.openstack.server_connected_to_keypair
      - target: port
        type: cloudify.openstack.server_connected_to_port
      - target: server_ip
        type: cloudify.openstack.server_connected_to_floating_ip

  docl_node:
    type: cloudify.nodes.Docl
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/create.py
            fabric_env: &manager_fabric_env
              user: { get_input: ssh_user }
              port: { get_input: ssh_port }
              key_filename: { get_property: [keypair, private_key_path] }
              host_string: { get_attribute: [server_ip, floating_ip_address] }
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/run_tests.py
            fabric_env: *manager_fabric_env
      cloudify.interfaces.exec_script:
        upload_docker_image:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/upload_docker_image.sh
            fabric_env: *manager_fabric_env
          executor: host_agent
        upload_manager_logs:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/upload_manager_logs.sh
            fabric_env: *manager_fabric_env
          executor: host_agent

outputs:
  docl_machine_ip:
    description: Docl endpoint
    value: { get_attribute: [server_ip, floating_ip_address] }
