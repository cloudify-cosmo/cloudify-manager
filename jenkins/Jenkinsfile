def secrets = [
  [path: 'secret/jenkins/github', engineVersion: 2, secretValues: [
    [envVar: 'PRIVATE_REPO_GITHUB_TOKEN', vaultKey: 'private_token']]],
  [path: 'secret/jenkins/aws', engineVersion: 2, secretValues: [
    [envVar: 'AWS_ACCESS_KEY_ID', vaultKey: 'aws_access_key_id'],
    [envVar: 'AWS_SECRET_ACCESS_KEY', vaultKey: 'aws_secret_access_key']]],
]

def configuration = [vaultUrl: "${env.VAULT_URL}",  vaultCredentialId: 'vault-app-role', engineVersion: 2]

pipeline {
  agent {
    kubernetes {
      label 'manager'
      defaultContainer 'jnlp'
      yamlFile 'jenkins/build-pod.yaml'
    }
  }

  options {
    checkoutToSubdirectory('cloudify-manager')
    buildDiscarder(logRotator(numToKeepStr:'30'))
    timeout(time: 60, unit: 'MINUTES')
    timestamps()
  }

  environment {
    branch = "${env.BRANCH_NAME}"
    workspace = "${env.WORKSPACE}"
    project = "cloudify-manager"
    cloudify_version = get_version("${env.BRANCH_NAME}")
    cloudify_package_release = get_package_release("${env.BRANCH_NAME}")
  }

  stages {
    stage('prepare') {
      steps {
        checkout([$class: 'GitSCM', branches: [[name: "${branch}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${project}"]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '9f6aca75-ebff-4045-9919-b8ec6b5ccf9d', url: 'https://github.com/cloudify-cosmo/cloudify-manager.git']]])
        
        container('python'){
          sh '''
            apt-get update
            apt-get install libldap-dev libsasl2-dev
            virtualenv ~/venv
          '''
        }
      }
    }
    stage('Run Tests & Builds') {
      parallel {
        stage('test_restservice') {
          steps {
            sh "mkdir -p ${workspace}/rest && cp -rf ${workspace}/${project}/. ${workspace}/rest"  
            
            container('python'){
              dir("${workspace}/rest") {
                dir("rest-service"){
                  sh '''
                    ~/venv/bin/pip install -Ur dev-requirements.txt
                    ~/venv/bin/pip install -Ur test-requirements.txt
                    ~/venv/bin/pip install -e .
                  '''
                }
                
                sh '''
                    ~/venv/bin/pytest \
                      -sv \
                      -a '(client_min_version is None or client_min_version <= 3.1) and (client_max_version is None or 3.1 <= client_max_version)' \
                      rest-service/manager_rest/test/endpoints

                    ~/venv/bin/pytest \
                      -sv \
                      -a '(client_min_version is None or client_min_version <= 3.1) and (client_max_version is None or 3.1 <= client_max_version)' \
                      rest-service/manager_rest/test/infrastructure

                    ~/venv/bin/pytest \
                      -sv \
                      rest-service/manager_rest/test/security

                    ~/venv/bin/pytest \
                      -sv \
                      workflows

                    ~/venv/bin/pytest \
                      -sv \
                      cloudify_types
                '''
              }
            }
          }
        }
        stage('build_rpms') {
          steps {
            container('rpmbuild'){
              sh """
                cd && mkdir rpmbuild && cd rpmbuild
                git clone https://github.com/cloudify-cosmo/cloudify-manager.git SOURCES && cd SOURCES
              """

              echo 'Download sources for RPM spec file & Build RPM'
              sh "yum install rpmdevtools -y"

              echo 'Build Rest Service RPM'
              build_rpm('~/rpmbuild/SOURCES', 'cloudify-rest-service.spec', "${cloudify_version}", "${cloudify_package_release}")
              
              echo 'Build mgmtworker RPM'
              build_rpm('~/rpmbuild/SOURCES', 'cloudify-mgmtworker.spec', "${cloudify_version}", "${cloudify_package_release}")
              
              echo 'Build rabbitmq RPM'
              build_rpm('~/rpmbuild/SOURCES', 'cloudify-rabbitmq.spec', "${cloudify_version}", "${cloudify_package_release}")
              
              echo 'Build manager-ip-setter rpm'
              build_rpm('~/rpmbuild/SOURCES', 'cloudify-manager-ip-setter.spec', "${cloudify_version}", "${cloudify_package_release}")
              
              echo 'Build status-reporter rpm'
              build_rpm('~/rpmbuild/SOURCES', 'cloudify-status-reporter.spec', "${cloudify_version}", "${cloudify_package_release}")
              
              echo 'Save Artifacts'
              sh("mkdir -p ${workspace}/rpm && cp -rf /root/rpmbuild/RPMS/x86_64/. ${workspace}/rpm")
              sh("cp -rf /root/rpmbuild/RPMS/noarch/. ${workspace}/rpm")
              dir("${workspace}/rpm") {
                archiveArtifacts artifacts: '*.rpm', onlyIfSuccessful: true
              }
            }
       
            echo 'Upload to S3'
            withVault([configuration: configuration, vaultSecrets: secrets]) {
              upload_to_s3("${workspace}/rpm", "${cloudify_version}", "${cloudify_package_release}", "${env.project}")
            }
          }
        }
        stage('flake8') {
          steps {
            sh "mkdir -p ${workspace}/flake8 && cp -rf ${workspace}/${project}/. ${workspace}/flake8"

            container('python'){
              dir("${workspace}/flake8") {
                  sh '''
                    pip install --user flake8
                    python -m flake8
                  '''
              }
            }
          }
        }
        stage('py3_compat') {
          steps {
            sh "mkdir -p ${workspace}/py3_compat && cp -rf ${workspace}/${project}/. ${workspace}/py3_compat"  

            container('python-old'){
              dir("${workspace}/py3_compat") {
                echo 'install futurize and find python3-incompatible code'
                sh '''#!/bin/bash
                  pip install future --user
                  PATH=$PATH:~/.local/bin
                  
                  FUTURIZE="futurize ."
                  while read line; do
                    [[ "$line" =~ ^#.* ]] && continue
                    FUTURIZE="${FUTURIZE} ${line}"
                  done<.circleci/py3fixers
                  $FUTURIZE>futurize_diffs
                '''
                
                echo 'name: check that there is no python3-incompatible code'
                sh'''#!/bin/bash
                  if [[ -s futurize_diffs ]]; then
                    echo "Python-3-incompatible code found"
                    cat futurize_diffs
                    exit 1
                  fi
                '''
              }
            }
          }
        }
      }
    }
    stage('Run Tests') {
      parallel {
        stage('test_amqp_postgres') {
          steps {
            sh "mkdir -p ${workspace}/amqp_postgres && cp -rf ${workspace}/${project}/. ${workspace}/amqp_postgres"  

            container('python'){
              dir("${workspace}/amqp_postgres") {
                dir("amqp-postgres"){
                  sh '''
                    ~/venv/bin/pip install -Ur test-requirements.txt
                    ~/venv/bin/pip install -e .
                  '''
                }
                
                sh '~/venv/bin/pytest -sv amqp-postgres'
              }
            }
          }
        }
        stage('test_premium') {
          steps {
            sh "mkdir -p ${workspace}/premium && cp -rf ${workspace}/${project}/. ${workspace}/premium"  

            container('python'){
              dir("${workspace}/premium") {
                withVault([configuration: configuration, vaultSecrets: secrets]) {
                  sh '''
                    pip install --user tox
                  '''
                  
                  sh """#!/bin/bash
                    set -eux
                    function clone {
                      branch=\$1
                      git clone \
                        --branch "\$1" \
                        --single-branch \
                        --depth 1 \
                        https://${env.PRIVATE_REPO_GITHUB_TOKEN}@github.com/cloudify-cosmo/cloudify-premium.git \
                        ~/cloudify-premium
                    }
                    clone "${branch}" || clone master
                  """
                  
                  dir("rest-service"){
                    sh '''
                      ~/venv/bin/pip install -Ur dev-requirements.txt
                      ~/venv/bin/pip install -Ur test-requirements.txt
                      ~/venv/bin/pip install -e .
                      ~/venv/bin/pip install -e ~/cloudify-premium
                    '''
                  }
                  echo 'Replace the cloudify-manager URL in dev-requirements.txt with the local path to this checkout'
                  sh 'sed -i "s:^.*cloudify-manager.*(rest-service)$:-e ${HOME}/project/\1/:" ~/cloudify-premium/dev-requirements.txt'
                  sh '~/venv/bin/pytest -sv ~/cloudify-premium/tests/unittests'
                }
              }
            }
          }
        }
      }
    }
  }
}
  
def build_rpm(String dir_path, String spec_file, String version, String package_release){
  echo 'Installing build dependencies for spec file and build a single component rpm'
  sh """
    cd ${dir_path}
    yum-builddep -y packaging/${spec_file}

    spectool \
      -d "CLOUDIFY_VERSION ${version}" \
      -d "CLOUDIFY_PACKAGE_RELEASE ${package_release}" \
      -P packaging/${spec_file} \
      -S -g

    rpmbuild \
      -D "CLOUDIFY_VERSION ${version}" \
      -D "CLOUDIFY_PACKAGE_RELEASE ${package_release}" \
      -bb packaging/${spec_file}
  """
}

def upload_to_s3(String rpm_upload_dir_path, String version, String package_release, String project_name){
  // vault must be connected and awscli container attached to pod_config
  if (!rpm_upload_dir_path?.trim() || !version?.trim() || !package_release?.trim() || !project_name?.trim()){
    return
  }
  
  container('awscli'){
    sh """
      aws s3 ls s3://${env.S3_RELEASE_BUCKET}
      echo "s3://${env.S3_RELEASE_BUCKET}/cloudify/${version}/${package_release}-build/${project_name}/${env.branch}/${env.BUILD_NUMBER}"
    """
    echo sh(returnStdout: true, script: 'env')
    
    // sh """
    //   aws s3 cp ${rpm_upload_dir}/* s3://${env.S3_RELEASE_BUCKET}/cloudify/${version}/${package_release}-build/${project_name}/${env.branch}/${env.BUILD_NUMBER}"
    // """
  }
}

def get_version(String branch_name){
  if (!branch_name?.trim()) {
    version_branch = 'master'
  }
  sh returnStdout:true, script: """
    eval "\$(curl 'https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/${branch_name}/packaging/version_info')"
    echo "\$CLOUDIFY_VERSION"
  """
}

def get_package_release(String branch_name){
  if (!branch_name?.trim()) {
    version_branch = 'master'
  }
  sh returnStdout:true, script: """
    eval "\$(curl 'https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/${branch_name}/packaging/version_info')"
    echo "\$CLOUDIFY_PACKAGE_RELEASE"
  """
}