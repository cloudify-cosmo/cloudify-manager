def secrets = [
  [path: 'secret/jenkins/github', engineVersion: 2, secretValues: [
    [envVar: 'PRIVATE_REPO_GITHUB_TOKEN', vaultKey: 'private_token']]],
]

def configuration = [vaultUrl: "${env.VAULT_URL}",  vaultCredentialId: 'vault-app-role', engineVersion: 2]

def vEnv(){
  sh script: '''
      virtualenv .venv
    ''', label: "creating virtualenv"
}
@Library('pipeline-shared-library') _

pipeline {
  agent {
    kubernetes {
      label "manager-mb-tests-${env.BRANCH_NAME}-${env.BUILD_NUMBER}"
      yamlFile 'jenkins/build-pod.yaml'
    }
  }
  parameters{
    string(name: 'BASE_BRANCH', defaultValue: 'master', description: 'Base Branch to pull from cloudify-premium')
  }
  options {
    checkoutToSubdirectory('cloudify-manager')
    buildDiscarder(logRotator(numToKeepStr:'10'))
    timeout(time: 60, unit: 'MINUTES')
    timestamps()
  }

  environment {
    BRANCH = "${env.BRANCH_NAME}"
    PROJECT = "cloudify-manager"
    VERSION = getVersion("${env.PROJECT}", "${env.BRANCH_NAME}").trim()
    PRERELEASE = getPreRelease("${env.PROJECT}", "${env.BRANCH_NAME}").trim()
    S3_BUILD_PATH = "${env.VERSION}/${env.PRERELEASE}-build/${env.PROJECT}/${env.BRANCH}/${env.BUILD_NUMBER}"
  }

  stages {
    stage('prepare') {
      steps {
        repoCheckout('https://github.com/cloudify-cosmo/cloudify-manager.git',"${env.PROJECT}","${env.BRANCH}")
        container('python'){
          sh '''
            apt-get update
            apt-get install libldap-dev libsasl2-dev libldap2-dev
          '''
        }
      }
    }
    stage('Run Tests & Builds') {
      parallel {
        stage('test_restservice') {
          steps {
            sh script: "mkdir -p ${env.WORKSPACE}/rest && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/rest", label: "copying repo to separate workspace"

            container('python'){
              dir("${env.WORKSPACE}/rest") {
                vEnv()
                sh script: '''
                    . .venv/bin/activate
                  cd rest-service
                  pip install -Ur dev-requirements.txt
                  pip install -Ur test-requirements.txt
                  pip install -e .
                ''', label: "installing requirements for pytest"
                sh script: '''
                  . .venv/bin/activate
                  pytest \
                    -sv \
                    -n 3 \
                    -a '(client_min_version is None or client_min_version <= 3.1) and (client_max_version is None or 3.1 <= client_max_version)' \
                    rest-service/manager_rest
                ''', label: "restservice tests"
                echo 'Running pytest <<workflows>>'
                sh '''
                  . .venv/bin/activate
                  pytest \
                    -sv \
                    workflows
                '''
                echo 'Running pytest <<cloudify_types>>'
                sh '''
                  . .venv/bin/activate
                  pytest \
                    -sv \
                    cloudify_types
                '''
              }
            }
          }
        }
        stage('run_mypy') {
          steps {
            sh script: "mkdir -p ${env.WORKSPACE}/mypy && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/mypy", label: "copying repo to separate workspace"

            container('python'){
              dir("${env.WORKSPACE}/mypy") {
                vEnv()
                sh script: '''
                  . .venv/bin/activate
                  cd rest-service
                  pip install "mypy>=0.812,<1"
                  mypy \
                    -p \
                    manager_rest \
                  || exit 0
                ''', label: "Static type checking (information only)"
              }
            }
          }
        }
        stage('build_rpms') {
          agent {
            kubernetes {
              label "manager-mb-rpmbuild-${env.BRANCH}-${env.BUILD_NUMBER}"
              yamlFile 'jenkins/rpm-pod.yaml'
            }
          }
          steps {
            container('rpmbuild'){
              sh """
                cd && mkdir rpmbuild && cd rpmbuild
                git clone --single-branch --branch ${env.BRANCH} https://github.com/cloudify-cosmo/cloudify-manager.git SOURCES && cd SOURCES
              """

              echo 'Download sources for RPM spec file & Build RPM'
              sh "yum install rpmdevtools -y"

              echo 'Build Rest Service RPM'
              buildRpm('~/rpmbuild/SOURCES', 'cloudify-rest-service.spec', "${env.VERSION}", "${env.PRERELEASE}")

              echo 'Build mgmtworker RPM'
              buildRpm('~/rpmbuild/SOURCES', 'cloudify-mgmtworker.spec', "${env.VERSION}", "${env.PRERELEASE}")

              echo 'Build rabbitmq RPM'
              buildRpm('~/rpmbuild/SOURCES', 'cloudify-rabbitmq.spec', "${env.VERSION}", "${env.PRERELEASE}")


              echo 'Copy RPMs to rpm folder'
              sh("mkdir -p ${env.WORKSPACE}/rpm && cp -rf /root/rpmbuild/RPMS/x86_64/. ${env.WORKSPACE}/rpm")
              sh("cp -rf /root/rpmbuild/RPMS/noarch/. ${env.WORKSPACE}/rpm")

            }
          }
          post {
            success {
              echo 'Upload artifacts to S3'
              uploadToReleaseS3("${env.WORKSPACE}/rpm/","${env.S3_BUILD_PATH}")
              archiveArtifacts '**/rpm/*.rpm'
            }
          }
        }
        stage('flake8') {
          steps {
            sh script: "mkdir -p ${env.WORKSPACE}/flake8 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/flake8", label: "copying repo to seperate workspace"

            container('python'){
              dir("${env.WORKSPACE}/flake8") {
                  sh '''
                    pip install --user flake8
                    python -m flake8
                  '''
              }
            }
          }
        }
      }
    }
    stage ('Run Tests'){
      parallel{
        stage ('test_amqp_postgres') {
          steps {
            sh script: "mkdir -p ${env.WORKSPACE}/amqp_postgres && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/amqp_postgres", label: "copying repo to seperate workspace"

            container('python'){
              dir("${env.WORKSPACE}/amqp_postgres") {
                dir("amqp-postgres"){
                  vEnv()
                  sh script: '''
                    . .venv/bin/activate
                    pip install -Ur test-requirements.txt
                    pip install -e .
                  ''', label: "installing requirements for pytest"
                  echo 'Running pytest <<amqp-postgres>>'
                  sh script: '''
                    . .venv/bin/activate
                    pytest -sv amqp_postgres
                  '''
                }
              }
            }
          }
        }
        stage('test_premium') {
          steps {
            sh script: "mkdir -p ${env.WORKSPACE}/premium && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/premium", label: "copying repo to seperate workspace"

            container('python'){
              dir("${env.WORKSPACE}/premium") {
                withVault([configuration: configuration, vaultSecrets: secrets]) {
                  echo 'cloning cloudify-premium'
                  sh """#!/bin/bash
                    set -eux
                    function clone {
                      branch=\$1
                      git clone \
                        --branch "\$1" \
                        --single-branch \
                        --depth 1 \
                        https://${env.PRIVATE_REPO_GITHUB_TOKEN}@github.com/cloudify-cosmo/cloudify-premium.git \
                        ~/cloudify-premium
                    }
                    clone "${env.BRANCH}" || clone "${params.BASE_BRANCH}"
                  """

                  vEnv()
                  sh script: '''
                    . .venv/bin/activate
                    cd rest-service
                    pip install -Ur dev-requirements.txt
                    pip install -Ur test-requirements.txt
                    pip install -e .
                    cd ..
                    pip install -e ~/cloudify-premium
                  ''', label: "installing requirements for pytest"
                  echo 'Replace the cloudify-manager URL in dev-requirements.txt with the local path to this checkout'
                  sh 'sed -i "s:^.*cloudify-manager.*(rest-service)$:-e ${HOME}/project/\1/:" ~/cloudify-premium/dev-requirements.txt'
                  echo 'Running pytest <<~/cloudify-premium/tests/unittests>>'
                  sh script: '''
                    . .venv/bin/activate
                    pytest -sv -n 3 ~/cloudify-premium/tests/unittests
                  '''
                }
              }
            }
          }
        }
      }
    }
  }
}
