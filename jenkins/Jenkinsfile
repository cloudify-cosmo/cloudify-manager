def secrets = [
  [path: 'secret/jenkins/github', engineVersion: 2, secretValues: [
    [envVar: 'PRIVATE_REPO_GITHUB_TOKEN', vaultKey: 'private_token']]],
]

def configuration = [vaultUrl: "${env.VAULT_URL}",  vaultCredentialId: 'vault-app-role', engineVersion: 2]

pipeline {
  agent {
    kubernetes {
      label 'manager'
      defaultContainer 'jnlp'
      yamlFile 'jenkins/build-pod.yaml'
    }
  }

  options {
    checkoutToSubdirectory('cloudify-manager')
    buildDiscarder(logRotator(numToKeepStr:'30'))
    timeout(time: 60, unit: 'MINUTES')
    timestamps()
  }

  environment {
    branch = "${env.BRANCH_NAME}"
    workspace = "${env.WORKSPACE}"
    manager_dir = "cloudify-manager"
  }

  stages {
    stage('prepare') {
      steps {
        container('python'){
          sh '''
            apt-get update
            apt-get install libldap-dev libsasl2-dev
            virtualenv ~/venv
          '''
        }
      }
    }
    stage('Run Tests') {
      parallel {
        stage('test_restservice') {
          steps {
            sh "mkdir -p ${workspace}/rest && cp -rf ${workspace}/${manager_dir}/. ${workspace}/rest"  
            
            container('python'){
              dir("rest") {
                dir("rest-service"){
                  sh '''
                    ~/venv/bin/pip install -Ur dev-requirements.txt
                    ~/venv/bin/pip install -Ur test-requirements.txt
                    ~/venv/bin/pip install -e .
                  '''
                }
                
                sh '''
                    ~/venv/bin/pytest \
                      -sv \
                      -a '(client_min_version is None or client_min_version <= 3.1) and (client_max_version is None or 3.1 <= client_max_version)' \
                      rest-service/manager_rest/test/endpoints

                    ~/venv/bin/pytest \
                      -sv \
                      -a '(client_min_version is None or client_min_version <= 3.1) and (client_max_version is None or 3.1 <= client_max_version)' \
                      rest-service/manager_rest/test/infrastructure

                    ~/venv/bin/pytest \
                      -sv \
                      rest-service/manager_rest/test/security

                    ~/venv/bin/pytest \
                      -sv \
                      workflows

                    ~/venv/bin/pytest \
                      -sv \
                      cloudify_types
                '''
              }
            }
          }
        }
        stage('test_amqp_postgres') {
          steps {
            sh "mkdir -p ${workspace}/amqp_postgres && cp -rf ${workspace}/${manager_dir}/. ${workspace}/amqp_postgres"  

            container('python'){
              dir("amqp_postgres") {
                dir("amqp-postgres"){
                  sh '''
                    ~/venv/bin/pip install -Ur test-requirements.txt
                    ~/venv/bin/pip install -e .
                  '''
                }
                
                sh '~/venv/bin/pytest -sv amqp-postgres'
              }
            }
          }
        }
        stage('test_premium') {
          steps {
            sh "mkdir -p ${workspace}/premium && cp -rf ${workspace}/${manager_dir}/. ${workspace}/premium"  

            container('python'){
              dir("premium") {
                withVault([configuration: configuration, vaultSecrets: secrets]) {
                  sh '''
                    pip install --user tox
                  '''
                  
                  sh """#!/bin/bash
                    set -eux
                    function clone {
                      branch=\$1
                      git clone \
                        --branch "\$1" \
                        --single-branch \
                        --depth 1 \
                        https://${env.PRIVATE_REPO_GITHUB_TOKEN}@github.com/cloudify-cosmo/cloudify-premium.git \
                        ~/cloudify-premium
                    }
                    clone "${branch}" || clone master
                    
                  """
                  
                  dir("rest-service"){
                    sh '''
                      ~/venv/bin/pip install -Ur dev-requirements.txt
                      ~/venv/bin/pip install -Ur test-requirements.txt
                      ~/venv/bin/pip install -e .
                      ~/venv/bin/pip install -e ~/cloudify-premium
                    '''
                  }
                  echo 'Replace the cloudify-manager URL in dev-requirements.txt with the local path to this checkout'
                  sh 'sed -i "s:^.*cloudify-manager.*(rest-service)$:-e ${HOME}/project/\1/:" ~/cloudify-premium/dev-requirements.txt'
                  sh '~/venv/bin/pytest -sv ~/cloudify-premium/tests/unittests'
                }
              }
            }
          }
        }
        stage('build_rpms') {
          steps {
            container('rpmbuild'){
              sh """
                cd && mkdir rpmbuild && cd rpmbuild
                git clone https://github.com/cloudify-cosmo/cloudify-manager.git SOURCES && cd SOURCES
              """

              echo 'Download sources for RPM spec file & Build RPM'
              sh "yum install rpmdevtools -y"

              echo 'Build Rest Service RPM'
              build_rpm('cloudify-rest-service.spec')
              
              echo 'Build mgmtworker RPM'
              build_rpm('cloudify-mgmtworker.spec')
              
              echo 'Build rabbitmq RPM'
              build_rpm('cloudify-rabbitmq.spec')
              
              echo 'Build manager-ip-setter rpm'
              build_rpm('cloudify-manager-ip-setter.spec')
              
              echo 'Build status-reporter rpm'
              build_rpm('cloudify-status-reporter.spec')
              
              echo 'Save Artifacts'
              sh("mkdir -p ${workspace}/rpm && cp -rf /root/rpmbuild/RPMS/x86_64/. ${workspace}/rpm")
              sh("cp -rf /root/rpmbuild/RPMS/noarch/. ${workspace}/rpm")
              dir("${workspace}/rpm") {
                archiveArtifacts artifacts: '*.rpm', onlyIfSuccessful: true
              }
            }
          }
        }
        stage('flake8') {
          steps {
            sh "mkdir -p ${workspace}/flake8 && cp -rf ${workspace}/${manager_dir}/. ${workspace}/flake8"

            container('python'){
              dir("flake8") {
                  sh '''
                    pip install --user flake8
                    python -m flake8
                  '''
              }
            }
          }
        }
        stage('py3_compat') {
          steps {
            sh "mkdir -p ${workspace}/py3_compat && cp -rf ${workspace}/${manager_dir}/. ${workspace}/py3_compat"  

            container('python-old'){
              dir("py3_compat") {
                echo 'install futurize and find python3-incompatible code'
                sh '''#!/bin/bash
                  pip install future --user
                  PATH=$PATH:~/.local/bin
                  
                  FUTURIZE="futurize ."
                  while read line; do
                    [[ "$line" =~ ^#.* ]] && continue
                    FUTURIZE="${FUTURIZE} ${line}"
                  done<.circleci/py3fixers
                  $FUTURIZE>futurize_diffs
                '''
                
                echo 'name: check that there is no python3-incompatible code'
                sh'''#!/bin/bash
                  if [[ -s futurize_diffs ]]; then
                    echo "Python-3-incompatible code found"
                    cat futurize_diffs
                    exit 1
                  fi
                '''
              }
            }
          }
        }
      }
    }
  }
  
  def build_rpm(String spec_file){
    echo 'Installing build dependencies for spec file and build a single component rpm'
    sh """
      cd ~/rpmbuild/SOURCES
      yum-builddep -y packaging/${spec_file}
      source packaging/version_info

      spectool \
        -d "CLOUDIFY_VERSION \$CLOUDIFY_VERSION" \
        -d "CLOUDIFY_PACKAGE_RELEASE \$CLOUDIFY_PACKAGE_RELEASE" \
        -P packaging/${spec_file} \
        -S -g

      rpmbuild \
        -D "CLOUDIFY_VERSION \$CLOUDIFY_VERSION" \
        -D "CLOUDIFY_PACKAGE_RELEASE \$CLOUDIFY_PACKAGE_RELEASE" \
        -bb packaging/${spec_file}
    """
  }
}