# Note that localhost is assumed for RabbitMQ by default
# and should be replaced using a relationship operation if they're not on the same host.

# We provide 2 inputs, one for events and one for logs.
input {
    rabbitmq {
        tags => ["log"]
        queue => "cloudify-logs"
        exchange => "cloudify-logs"
        host => "{{ rabbitmq.endpoint_ip }}"
        port => "5672"
        durable => "true"
        exclusive => "false"
        user => "{{ rabbitmq.username }}"
        password => "{{ rabbitmq.password }}"
    }
    rabbitmq {
        tags => ["event"]
        queue => "cloudify-events"
        exchange => "cloudify-events"
        host => "{{ rabbitmq.endpoint_ip }}"
        port => "5672"
        durable => "true"
        exclusive => "false"
        user => "{{ rabbitmq.username }}"
        password => "{{ rabbitmq.password }}"
    }
    # This allows us to verify that logstash is running.
    # it is non-functional for the manager and will be removed in the future.
    tcp {
        port => "9999"
    }
}

# This allows us to reformat the events/logs timestamps to the current manager time
# This is meant to overcome timing issues with events coming in late or getting stuck in the queue.
# It is only a temporary solution.
filter {
    date { match => [ "timestamp", "ISO8601" ] }

    # Set context.operation field to the empty string by default
    # this will be inserted as null below thanks to NULLIF
    if ![context][operation] {
        mutate {
            add_field => {
                "[context][operation]" => ""
            }
        }
    }

    # Set context.node_id field to the empty string by default
    # this will be inserted as null below thanks to NULLIF
    if ![context][node_id] {
        mutate {
            add_field => {
                "[context][node_id]" => ""
            }
        }
    }

    # Set context.task_error_causes field to the empty string by default
    # this will be inserted as null below thanks to NULLIF
    if ![context][task_error_causes] {
        mutate {
            add_field => {
                "[context][task_error_causes]" => ""
            }
        }
    } else {
        json_encode {
            source => "[context][task_error_causes]"
        }
    }
}


output {
    if "log" in [tags] {
        jdbc {
            driver_class => 'org.postgresql.Driver'
            connection_string => 'jdbc:postgresql://{{ postgresql.host }}:5432/{{ postgresql.db_name }}?user={{ postgresql.username }}&password={{ postgresql.password }}'
            statement => [
              "INSERT INTO logs (timestamp, reported_timestamp, _execution_fk, _tenant_id, _creator_id, logger, level, message, message_code, operation, node_id) SELECT now() AT TIME ZONE 'utc', CAST (? AS TIMESTAMP), _storage_id, _tenant_id, _creator_id, ?, ?, ?, ?, NULLIF(?, ''), NULLIF(?, '') FROM executions WHERE id = ?",
              "@timestamp",
              "[logger]",
              "[level]",
              "%{[message][text]}",
              "[message_code]",
              "%{[context][operation]}",
              "%{[context][node_id]}",
              "%{[context][execution_id]}"
            ]
        }
    }

    if "event" in [tags] {
        jdbc {
            driver_class => 'org.postgresql.Driver'
            connection_string => 'jdbc:postgresql://{{ postgresql.host }}:5432/{{ postgresql.db_name }}?user={{ postgresql.username }}&password={{ postgresql.password }}'
            statement => [
              "INSERT INTO events (timestamp, reported_timestamp, _execution_fk, _tenant_id, _creator_id, event_type, message,  message_code, operation, node_id, error_causes) SELECT now() AT TIME ZONE 'utc', CAST (? AS TIMESTAMP), _storage_id, _tenant_id, _creator_id, ?, ?, ?, NULLIF(?, ''), NULLIF(?, ''), NULLIF(?, '') FROM executions WHERE id = ?",
              "@timestamp",
              "[event_type]",
              "%{[message][text]}",
              "[message_code]",
              "%{[context][operation]}",
              "%{[context][node_id]}",
              "%{[context][task_error_causes]}",
              "%{[context][execution_id]}"
            ]
        }
    }
}
