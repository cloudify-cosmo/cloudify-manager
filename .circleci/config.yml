version: 2

checkout:
  post:
    - >
      if [ -n "$CI_PULL_REQUEST" ]; then
        PR_ID=${CI_PULL_REQUEST##*/}
        git fetch origin +refs/pull/$PR_ID/merge:
        git checkout -qf FETCH_HEAD
      fi


defaults:
  - &tox_defaults
    docker:
      - image: circleci/python:2.7

        environment:
          TOX_CONFIG: ./rest-service

    steps:
      - checkout

      - run: sudo apt-get install libldap-dev libsasl2-dev
      - run: pip install --user tox
      - run: python -m tox -c $TOX_CONFIG/tox.ini -e $DO_ENV
      - run:
          name: Push coverage data to codecov
          command: |
            bash <(curl -s https://codecov.io/bash) -F $TOX_TEST

jobs:
  flake8:
    <<: *tox_defaults

    steps:
      - checkout
      - run: pip install --user flake8
      - run: python -m flake8 plugins/riemann-controller/ workflows/ rest-service/ tests/ amqp-postgres/

  test_v1:
    <<: *tox_defaults
    environment:
      DO_ENV: clientV1-endpoints,clientV1-infrastructure

  test_clientv2_endpoints:
    <<: *tox_defaults
    environment:
      DO_ENV: clientV2-endpoints

  test_clientv2_infrastructure:
    <<: *tox_defaults
    environment:
      DO_ENV: clientV2-infrastructure

  test_clientv2_1_endpoints:
    <<: *tox_defaults
    environment:
      DO_ENV: clientV2_1-endpoints

  test_clientv2_1_infrastructure:
    <<: *tox_defaults
    environment:
      DO_ENV: clientV2_1-infrastructure

  test_clientv3_endpoints:
    <<: *tox_defaults
    environment:
      DO_ENV: clientV3-endpoints

  test_clientv3_infrastructure:
    <<: *tox_defaults
    environment:
      DO_ENV: clientV3-infrastructure

  test_clientv3_1_endpoints:
    <<: *tox_defaults
    environment:
      DO_ENV: clientV3_1-endpoints

  test_clientv3_1_infrastructure:
    <<: *tox_defaults
    environment:
      DO_ENV: clientV3_1-infrastructure

  test_workflows:
    <<: *tox_defaults
    environment:
      TOX_CONFIG: ./workflows
      DO_ENV: py27

  test_amqp_postgres:
    docker:
      - image: circleci/python:2.7
        environment:
          TEST_DATABASE_URL: postgresql://cloudify:cloudify@localhost/cloudify_db
      - image: rabbitmq:3.7.7
      - image: circleci/postgres:9.5-alpine
        environment:
          POSTGRES_USER: cloudify
          POSTGRES_PASSWORD: cloudify
          POSTGRES_DB: cloudify_db
    steps:
      - checkout
      - run: sudo apt-get install libldap-dev libsasl2-dev
      - run:
          name: Install tox and run test
          command: |
            pip install --user tox
            python -m tox -c amqp-postgres/tox.ini
      - run:
          name: Push coverage data to codecov
          command: |
            bash <(curl -s https://codecov.io/bash)

  test_premium:
    docker:
      - image: circleci/python:2.7

    steps:
      - checkout
      - run: sudo apt-get install libldap-dev libsasl2-dev
      - run: pip install --user tox
      - run:
          name: Avoid hosts unknown for github
          command: mkdir -p ~/.ssh && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

      - run: git clone git@github.com:cloudify-cosmo/cloudify-premium.git ~/cloudify-premium
      - run: |
          cd ~/cloudify-premium
          git fetch --depth 1 origin "${CIRCLE_BRANCH}" && git checkout "${CIRCLE_BRANCH}" || echo no matching branch found, using master
      # Replace the cloudify-manager URL in dev-requirements.txt with the local path to this checkout
      - run: sed -i "s:^.*cloudify-manager.*\(rest-service\)$:-e ${HOME}/project/\1/:" ~/cloudify-premium/dev-requirements.txt
      - run: python -m tox -c ~/cloudify-premium/tox.ini


  build-rpms:
    machine:
      enabled: true

    steps:
      - checkout
      - run: sudo apt-get install parallel
      - run: |
          builder="docker run --cap-add SYS_ADMIN --security-opt apparmor:unconfined --mount type=bind,source=$(pwd),target=/source cloudify3/mock-builder:0.1 python /source/packaging/build_rpm.py /source/packaging/"
          parallel --results logs $builder{} ::: \
              cloudify-rest-service.spec \
              cloudify-manager-ip-setter.spec \
              cloudify-mgmtworker.spec \
              cloudify-agents.spec \
              cloudify-rabbitmq.spec \
              cloudify-riemann.spec
      - run: mkdir result
      - run: mv packaging/*.rpm result

      - store_artifacts:
          path: logs
          destination: logs
      - store_artifacts:
          path: result
          destination: result


workflows:
  version: 2

  build_and_test:
    jobs:
      - flake8
      - build-rpms
      - test_v1
      - test_clientv2_endpoints
      - test_clientv2_infrastructure
      - test_clientv2_1_endpoints
      - test_clientv2_1_infrastructure
      - test_clientv3_endpoints
      - test_clientv3_infrastructure
      - test_clientv3_1_endpoints
      - test_clientv3_1_infrastructure
      - test_workflows
      - test_premium
      - test_amqp_postgres
