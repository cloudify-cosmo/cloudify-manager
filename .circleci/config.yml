version: 2.1

checkout:
  post:
    - >
      if [ -n "$CI_PULL_REQUEST" ]; then
        PR_ID=${CI_PULL_REQUEST##*/}
        git fetch origin +refs/pull/$PR_ID/merge:
        git checkout -qf FETCH_HEAD
      fi

defaults:
  - &only_master
    filters:
      branches:
        only:
          - master
  - &tox_defaults
    docker:
      - image: circleci/python:2.7
        environment:
          TOX_CONFIG: ./rest-service
      - image: circleci/postgres:9.5-alpine
        environment:
          POSTGRES_USER: cloudify
          POSTGRES_PASSWORD: cloudify
          POSTGRES_DB: cloudify_db
    steps:
      - checkout
      - run: sudo apt-get install libldap-dev libsasl2-dev
      - run: pip install --user tox
      - run: python -m tox -c $TOX_CONFIG/tox.ini -e $DO_ENV
      - run:
          name: Push coverage data to codecov
          command: |
            bash <(curl -s https://codecov.io/bash) -F $TOX_TEST
  - &rest_service_external_tox_defaults
    docker:
      - image: circleci/python:2.7
    steps:
      - checkout
      - run: pip install --user tox
      - run: python -m tox -c $TOX_CONFIG/tox.ini -e $DO_ENV
      - run:
          name: Push coverage data to codecov
          command: |
            bash <(curl -s https://codecov.io/bash) -F $TOX_TEST

jobs:
  test_endpoints_36:
    docker:
      - image: circleci/python:3.6
      - image: circleci/postgres:9.5-alpine
        environment:
          POSTGRES_USER: cloudify
          POSTGRES_PASSWORD: cloudify
          POSTGRES_DB: cloudify_db
    steps:
      - checkout
      - run: sudo apt-get install libldap-dev libsasl2-dev
      - run: virtualenv ~/venv
      - run: |
          pushd rest-service
            ~/venv/bin/pip install -Ur dev-requirements.txt
            ~/venv/bin/pip install -Ur test-requirements.txt
            ~/venv/bin/pip install -e .
          popd
      - run: |
          ~/venv/bin/pytest \
            -sv \
            -a '(client_min_version is None or client_min_version <= 3.1) and (client_max_version is None or 3.1 <= client_max_version)' \
            rest-service/manager_rest/test/endpoints
      - run: |
          ~/venv/bin/pytest \
            -sv \
            -a '(client_min_version is None or client_min_version <= 3.1) and (client_max_version is None or 3.1 <= client_max_version)' \
            rest-service/manager_rest/test/infrastructure
      - run: |
          ~/venv/bin/pytest \
            -sv \
            rest-service/manager_rest/test/security
      - run: |
          ~/venv/bin/pytest \
            -sv \
            workflows
      - run: |
          ~/venv/bin/pytest \
            -sv \
            cloudify_types

  test_amqp_postgres:
    docker:
      - image: circleci/python:3.6
        environment:
          TEST_DATABASE_URL: postgresql://cloudify:cloudify@localhost/cloudify_db
      - image: rabbitmq:3.7.7
      - image: circleci/postgres:9.5-alpine
        environment:
          POSTGRES_USER: cloudify
          POSTGRES_PASSWORD: cloudify
          POSTGRES_DB: cloudify_db
    steps:
      - checkout
      - run: sudo apt-get install libldap-dev libsasl2-dev
      - run: virtualenv ~/venv
      - run: |
          pushd amqp-postgres
            ~/venv/bin/pip install -Ur test-requirements.txt
            ~/venv/bin/pip install -e .
          popd
      - run: |
          ~/venv/bin/pytest \
            -sv \
            amqp-postgres

  flake8:
    docker:
      - image: circleci/python:2.7

    steps:
      - checkout
      - run: pip install --user flake8
      - run: python -m flake8

  test_premium:
    docker:
      - image: circleci/python:2.7
      - image: circleci/postgres:9.5-alpine
        environment:
          POSTGRES_USER: cloudify
          POSTGRES_PASSWORD: cloudify
          POSTGRES_DB: cloudify_db
    steps:
      - checkout
      - run: sudo apt-get install libldap-dev libsasl2-dev
      - run: pip install --user tox
      - clone_premium

      # Replace the cloudify-manager URL in dev-requirements.txt with the local path to this checkout
      - run: sed -i "s:^.*cloudify-manager.*\(rest-service\)$:-e ${HOME}/project/\1/:" ~/cloudify-premium/dev-requirements.txt
      - run: python -m tox -c ~/cloudify-premium/tox.ini


  build-rpms:
    docker:
      - image: rpmbuild/centos7
    working_directory: ~/rpm
    steps:
      - checkout
      - run:
          name: Set version environment variables
          command: cat packaging/version_info >> $BASH_ENV
      - run: sudo yum install rpmdevtools -y
      - run: sudo chmod a+wx /opt
      - build_rpm:
          spec_file: cloudify-rest-service.spec
      - build_rpm:
          spec_file: cloudify-mgmtworker.spec
      - build_rpm:
          spec_file: cloudify-rabbitmq.spec
      - build_rpm:
          spec_file: cloudify-manager-ip-setter.spec
      - build_rpm:
          spec_file: cloudify-status-reporter.spec
      - run: |
          mkdir result
          mv noarch/*.rpm result || true
          mv x86_64/*.rpm result || true
      - store_artifacts:
          path: result
          destination: result

  py3_compat:
    docker:
      - image: circleci/python:2.7
    steps:
      - checkout
      - run:
          name: install futurize
          command: pip install future --user
      - run:
          name: find python3-incompatible code
          command: |
            FUTURIZE="futurize ."
            while read line; do
              [[ "$line" =~ ^#.* ]] && continue
              FUTURIZE="${FUTURIZE} ${line}"
            done<.circleci/py3fixers
            $FUTURIZE>futurize_diffs
      - run:
          name: check that there is no python3-incompatible code
          command: |
            if [[ -s futurize_diffs ]]; then
              echo "Python-3-incompatible code found"
              cat futurize_diffs
              exit 1
            fi

commands:
  clone_premium:
    description: Clone cloudify-premium to ~/cloudify-premium
    steps:
      - run:
          name: Avoid hosts unknown for github
          command: mkdir -p ~/.ssh && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
      - run:
          name: git clone premium
          command: |
            set -eux
            function clone {
              branch=$1
              git clone \
                --branch "$1" \
                --single-branch \
                --depth 1 \
                git@github.com:cloudify-cosmo/cloudify-premium.git \
                ~/cloudify-premium
            }
            clone "${CIRCLE_BRANCH}" || clone master

  build_rpm:
    description: Build a single component rpm
    parameters:
      spec_file:
        description: Name of the spec spec file
        type: string
    steps:
      - run:
          name: Installing build dependencies for << parameters.spec_file >>
          command: sudo yum-builddep -y packaging/<< parameters.spec_file >>
      - run:
          name: Downloading sources for << parameters.spec_file >>
          command: |
            spectool \
              -d "CLOUDIFY_VERSION ${CLOUDIFY_VERSION}" \
              -d "CLOUDIFY_PACKAGE_RELEASE ${CLOUDIFY_PACKAGE_RELEASE}" \
              -P packaging/<< parameters.spec_file >> \
              -S -g
      - run:
          name: Building rpm from << parameters.spec_file >>
          command: |
            rpmbuild \
              -D "CLOUDIFY_VERSION ${CLOUDIFY_VERSION}" \
              -D "CLOUDIFY_PACKAGE_RELEASE ${CLOUDIFY_PACKAGE_RELEASE}" \
              -bb packaging/<< parameters.spec_file >>

workflows:
  version: 2
  build_and_test:
    jobs: &build_jobs
      - flake8
      - test_endpoints_36
      - test_amqp_postgres
      - py3_compat
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs: *build_jobs
